package com.android.administrator.contacts_fuzhucheng.ui.fragment;

import android.content.ContentProvider;
import android.content.ContentUris;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.provider.ContactsContract;
import android.support.v4.app.Fragment;
import android.support.v7.app.AlertDialog;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.Toast;

import com.android.administrator.contacts_fuzhucheng.ContactsProvider;
import com.android.administrator.contacts_fuzhucheng.R;
import com.android.administrator.contacts_fuzhucheng.ui.activity.AddActivity;
import com.android.administrator.contacts_fuzhucheng.utils.db.MyAdapter;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by Administrator on 2016/4/19.
 */
public class ContactsFragment extends Fragment {

//    private View view_pop;//坑爹的popupwindow！！！！activity和fragment中差异极大

//    public List<Map<String, Object>> data;  //存储联系人数据

    private PopupWindow mPopWindow;//点击item的菜单

    private static final String LOG_TAG = "MY_LOG_TAG";

    private ListView listView;   //用来显示联系人列表（主页）
    private  UserBean userBean;
    private ArrayList<UserBean> userBeanList = new ArrayList<UserBean>();
//    private DBOpenHelper dbOpenHelper;        //不用自己创建的数据库了

    private ContentProvider intent = new ContactsProvider();

//    private SimpleCursorAdapter adapter;

    private MyAdapter adapter;//自定义baseadapter

    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
//        setDefaultKeyMode(DEFAULT_KEYS_SHORTCUT);
        setHasOptionsMenu(true);

    }


    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.contacts, null); //先解析file.xml布局，得到一个view
        listView = (ListView) rootView.findViewById(R.id.listView);


//        ContentResolver contentResolver = getContext().getContentResolver();
//        Uri selectUri = Uri.parse("content://com.android.personProvider/person");
//        Cursor cursor = contentResolver.query(selectUri, null, null, null, null);
        //获取将要绑定的数据设置到data中
//        data = getData();
        userBeanList = readContacts();
        adapter = new MyAdapter(getActivity());
        adapter.setData(userBeanList);
        listView.setAdapter(adapter);


        //item的监听
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
//                showPopupWindow();
                dialog(id,position);
//                Log.i(LOG_TAG, String.valueOf(map));
            }
        });

//        ListView listView = (ListView) rootView.findViewById(R.id.listView);
//        List<Map<String,Object>> listData=new ArrayList<Map<String,Object>>();
//        String[] values = new String[] { "Android", "iPhone", "WindowsMobile",
//                "Blackberry", "WebOS", "Ubuntu", "Windows7", "Max OS X",
//                "Linux", "OS/2" };
//
//        ArrayAdapter<String> files = new ArrayAdapter<String>(getActivity(),
//                android.R.layout.simple_list_item_1,
//                values);
//        listView.setAdapter(files);

        return rootView;

    }

    //删除联系人
    public void showDelete(final long id,final int position){
        Uri deleteUri = ContentUris.withAppendedId(ContactsContract.Contacts.CONTENT_URI, id);
        Uri lookupUri = ContactsContract.Contacts.getLookupUri(getActivity().getContentResolver(), deleteUri);
        if(lookupUri != Uri.EMPTY){
            getActivity().getContentResolver().delete(deleteUri, null, null);
        }
        adapter.remove(position);
        adapter.notifyDataSetChanged();
        Toast.makeText(getActivity(), "该联系人已经被删除.", Toast.LENGTH_SHORT).show();
    }

    //使用dialog弹出来
    private void dialog(final long id,final int position) {
        final String items[]={"查看详细","新增联系人","删除联系人","分享联系人"};

        //dialog参数设置
        AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());  //先得到构造器
        builder.setTitle("提示"); //设置标题
        //builder.setMessage("是否确认退出?"); //设置内容
        builder.setIcon(R.drawable.image_contacts);//设置图标，图片id即可
        //设置列表显示，注意设置了列表显示就不要设置builder.setMessage()了，否则列表不起作用。

        builder.setItems(items, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                Uri uri = null;
//                Toast.makeText(getActivity(), items[which], Toast.LENGTH_SHORT).show();
                switch (items[which]) {
                    case "查看详细":
//                        Intent intent_look=new Intent();
//                        intent_look.putExtra("contact_id",id);
//                        intent_look.putExtra("contact_position",position);
//                        intent_look.setClass(getActivity(),ContactView.class);
//                        startActivity(intent_look);


                        uri = ContactsContract.Contacts.CONTENT_URI;
                        Uri personUri = ContentUris.withAppendedId(uri, position);
                        Intent intent2 = new Intent();
                        intent2.setAction(Intent.ACTION_VIEW);
                        intent2.setData(personUri);
                        startActivity(intent2);


//                        Log.i(LOG_TAG, String.valueOf(position));
                        break;
                    case "新增联系人":
                        Intent intent = new Intent();
                        intent.setClass(getActivity(), AddActivity.class);
                        startActivity(intent);
                        break;
                    case "删除联系人":
                        showDelete(id,position);
//                        Toast.makeText(getActivity(), "删除联系人", Toast.LENGTH_SHORT).show();
                        break;
                    case "分享联系人":
                        Toast.makeText(getActivity(), "分享联系人", Toast.LENGTH_SHORT).show();
                        break;
                }

            }
        });
        builder.setPositiveButton("确定", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                Toast.makeText(getActivity(), "确定", Toast.LENGTH_SHORT).show();
            }
        });
        builder.create().show();
    }


    //坑爹的popupwindow！！！！在fragment里面的事件，那个点击外部消失事件限定在activity
//    private void showPopupWindow(){
//
//        //设置contentView
//        View contentView = LayoutInflater.from(getActivity()).inflate(R.layout.popwindow, null);
////        contentView.setFocusable(true);//默认的是所有的操作都无效的，除了HOME键。而且是可以操作后面的界面的。想要锁定后面的界面
////        contentView.setFocusableInTouchMode(true);
//
//        mPopWindow = new PopupWindow(contentView,
//                ViewPager.LayoutParams.WRAP_CONTENT, ViewPager.LayoutParams.WRAP_CONTENT);
//        //设置popupwindow位置
//        mPopWindow.showAtLocation(contentView, Gravity.CENTER, 0, 0);
////        mPopWindow.setTouchable(true); // 设置PopupWindow可触摸
//
//        mPopWindow.setBackgroundDrawable(new BitmapDrawable());
//        mPopWindow.setFocusable(true);
//        mPopWindow.setOutsideTouchable(true);//设置点击屏幕其它地方弹出框消失
//        view_pop.onTouchEvent(  );
//
//        // 设置各个控件的点击响应
//        TextView tv1 = (TextView)contentView.findViewById(R.id.pop_computer);
//        TextView tv2 = (TextView)contentView.findViewById(R.id.pop_financial);
//        TextView tv3 = (TextView)contentView.findViewById(R.id.pop_manage);
//
//        tv1.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                Uri uri = null;
//                uri = ContactsContract.Contacts.CONTENT_URI;
////                Uri personUri = ContentUris.withAppendedId(uri, cb.getContactId());
//
//                Intent intent=new Intent();
//                intent.setClass(getActivity(),ContactView.class);
//                startActivity(intent);
//
//            }
//        });
//        tv2.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                Toast.makeText(getActivity(), "默认Toast样式",
//                        Toast.LENGTH_SHORT).show();
//            }
//        });
//        tv3.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                Toast.makeText(getActivity(), "默认Toast样式",
//                        Toast.LENGTH_SHORT).show();
//            }
//        });
//
//        //显示PopupWindow
//        View rootview = LayoutInflater.from(getActivity()).inflate(R.layout.contacts, null);
//        mPopWindow.showAtLocation(rootview, Gravity.BOTTOM, 0, 0);
//
//
//    }

//    public boolean onTouchEvent(MotionEvent event) {
//// TODO Auto-generated method stub
//        if (mPopWindow != null && mPopWindow.isShowing()) {
//            mPopWindow.dismiss();
//            mPopWindow = null;
//        }
////        return super.onTouchEvent(event);
//        return false;
//    }

    //中间listview数据显示
    private ArrayList<UserBean> readContacts() {
        Cursor cursor = null;
        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
        Map<String, Object> map;

        int contactIdIndex = 0;


        try {
// 查询联系人数据
            cursor = getContext().getContentResolver().query(
                    ContactsContract.CommonDataKinds.Phone.CONTENT_URI,
                    null, null, null, null);
            contactIdIndex = cursor.getColumnIndex(ContactsContract.Contacts._ID);        //数据库中联系人id

            while (cursor.moveToNext()) {
// 获取联系人姓名
                String displayName = cursor.getString(cursor.getColumnIndex(
                        ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
// 获取联系人手机号
                String number = cursor.getString(cursor.getColumnIndex(
                        ContactsContract.CommonDataKinds.Phone.NUMBER));

                String contactId = cursor.getString(contactIdIndex);        //数据库中联系人id
                Log.i(LOG_TAG, contactId);


                //把+86删除
                if (number.startsWith("+86"))
                    number = number.substring(3);

//                map = new HashMap<String, Object>();
                userBean = new UserBean();
                userBean.setImg(R.drawable.image_contacts);
                userBean.setInfo(number);
                userBean.setItem_Id(contactId);
                userBean.setTitle(displayName);
//                map.put(cursor.getCount()+"", userBean);

                userBeanList.add(userBean);
//                Log.i(LOG_TAG,String.valueOf(cursor.toString()));
//                Log.i(LOG_TAG,String.valueOf(map));       测试放进去有没有错

            }


        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (cursor != null) {
                cursor.close();

            }
        }
        return userBeanList;
    }

//    private List<Map<String, Object>> getData()
//    {
//
//        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
//            Map<String, Object> map;
//
//
//
//        //没问题的数据显示方法
////        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
////        Map<String, Object> map;
////        for(int i=0;i<10;i++)
////        {
////            map = new HashMap<String, Object>();
////            map.put("img", R.drawable.image_contacts);
////            map.put("title", "靓仔");
////            map.put("info", "打波无...");
////            list.add(map);
////        }
//        return list;
//    }



    //动态菜单处理
    //单击的默认操作在这里处理
//    protected boolean onListItemClick(ListView l, View v,int position,long id){
//        Uri uri= ContentUris.withAppendedId()
//    }



    public void onPause() {

        super.onPause();
    }

    public void onResume() {

        super.onResume();
    }

    public void onDestroy() {

        super.onDestroy();
    }

    public void onDestroyView() {
        super.onDestroyView();
    }

    public void onStop() {
        super.onStop();
    }

    public void onStart() {
        super.onStart();
    }
}

